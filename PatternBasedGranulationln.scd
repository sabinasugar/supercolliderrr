(
SynthDef(\gran_2b, { |out = 0, pos = 0, sndBuf = 0, windowBuf = 1, granDur = 0.1,
    rate = 1, loop = 1, panMax = 0, amp = 1, bpFreq = 500, bpRQ = 0.5, bpWet = 1|
    var window, granSrc, src;
    granSrc = PlayBuf.ar(1, sndBuf, BufRateScale.kr(sndBuf) * rate,
        1, round(pos * BufFrames.kr(sndBuf)), loop, 2);
    window = BufRd.ar(1, windowBuf,
        EnvGen.ar(Env([0, BufFrames.kr(windowBuf)], [granDur]),
        doneAction: 2), loop, 4);
    // do amplitude compensation, estimation like in Wavesets example by Alberto de Campo
    src = (BPF.ar(granSrc, bpFreq, bpRQ, mul: (bpRQ ** -1) * (400 / bpFreq ** 0.5)) *
        bpWet + (granSrc * (1 - bpWet)));

    OffsetOut.ar(out, Pan2.ar(src, panMax, amp) * window);
}).add;

// change filter to DFM1 or else

b = Buffer.read(s, "/Users/ivainkalashnik/Desktop/fskomdgfogm.wav");
// This searches the most likely extension places for the miSCellaneous folder.
// In case of an extraordinary install situation or a removed sound file, pass the concerned path.

w = Buffer.sendCollection(s, Signal.hanningWindow(1024));
)


// random types

// 0: low value
// 1: low or high value, evenly distributed
// 2: evenly distributed
// 3: linear decrease from mean value
// 4: exponential distribution
// 5: beta distribution, default parameter 0.3 centers value at the borders
// 6: brownian movement (of first order)
// 7: brownian movement of second order (stepsize itself generated by brownian movement)

// A second order brownian movement much more tends to get stuck at the
// borders than a normal (first order) brownian movement
// E.g. see Sergio Luque's presentation of Xenakis's stochastic synthesis:
// "Stochastic Synthesis, Origins and Extensions", pp 25-28
// http://sergioluque.com


// Function that generates an array of PLx patterns
// of different random types (see PLx suite).
// These placeholders can refer to environmental variables
// to be set by the VarGui interface later on.

(
d = { |keyLo, keyHi, betaProb = 0.3, brownStepFac = 0.01,
    brown2Ratio = 1, brown2StepFac = 0.01|
    // keyLo and keyHi must be Symbols,
    // other args may be Symbols
    var patLo, patHi, patDif;

    // avoid lo-hi reversing with Pbrown
    patLo = min(PL(keyLo), PL(keyHi));
    patHi = max(PL(keyLo), PL(keyHi));
    patDif = patHi - patLo;
    [
        PL(keyLo),
        Pfunc { currentEnvironment[[keyLo, keyHi].choose] },
        PLwhite(keyLo, keyHi),
        PLmeanrand(keyLo, keyHi),
        PLexprand(keyLo, keyHi),
        PLbeta(keyLo, keyHi, betaProb, betaProb),
        PLbrown(patLo, patHi, patDif * PL(brownStepFac)),
        PLbrown(patLo, patHi,
            PLbrown(
                patDif.neg * PL(brown2Ratio) / 2,
                patDif * PL(brown2Ratio) / 2,
                patDif * PL(brown2Ratio) * PL(brown2StepFac)
            )
        )
    ]
};
)

// trigrate, granDur, rate and bpFreq are
// chosen between bounds according to the
// random distribution type notated with suffix D

// single grains are filtered with a bandpass
// amount of effect controlled with bpWet

(
p = Pbind(
    \instrument, \gran_2b,
    \sndBuf, b,
    \windowBuf, w,

    \dur, 1 / PLswitch1(d.(\trigRateLo, \trigRateHi), \trigRateD),
    \granDur, PLswitch1(d.(\granDurLo, \granDurHi), \granDurD),
    \time, Ptime(),
    \posRate, PL(\posRate),
    \pos, Pfunc { |e|
        var relTime = ~posRate * e.time / e.sndBuf.duration, relDif;
        relDif = ~posHi - ~posLo;
        relTime + rand2(~posDev) % relDif + ~posLo;
    },
    \rate, PLswitch1(d.(\rateLo, \rateHi), \rateD),
    \bpFreq, PLswitch1(d.(\bpFreqLo, \bpFreqHi), \bpFreqD),
    \bpRQ, PL(\bpRQ),
    \bpWet, PL(\bpWet),

    \amp, PL(\amp),
    \panMax, PLseq([-1,1]) * PL(\panMax),
    \out, 0
);

VarGui([
    \posLo, [0.0, 0.99, \lin, 0.01, 0.21],
    \posHi, [0.0, 0.99, \lin, 0.01, 0.47],
    \posRate, [0.1, 2, \lin, 0.01, 0.2],
    \posDev, [0, 0.2, 5, 0, 0.002],

    \trigRateLo, [1, 200, \lin, 0.01, 21],
    \trigRateHi, [1, 200, \lin, 0.01, 155],
    \trigRateD, [0, 7, \lin, 1, 6],

    \granDurLo, [0.01, 0.6, \exp, 0.0, 0.037],
    \granDurHi, [0.01, 0.6, \exp, 0.0, 0.4],
    \granDurD, [0, 7, \lin, 1, 6],

    \rateLo, [0.1, 3, \lin, 0.01, 1.09],
    \rateHi, [0.1, 3, \lin, 0.01, 1.63],
    \rateD, [0, 7, \lin, 1, 1],

    \bpFreqLo, [50, 10000, \exp, 0.1, 54],
    \bpFreqHi, [50, 10000, \exp, 0.1,8275],
    \bpFreqD, [0, 7, \lin, 1, 1],
    \bpRQ, [0.01, 0.99, \lin, 0.0, 0.07],
    \bpWet, [0.0, 1, \linear, 0.0, 0.23],

    \panMax, [0.0, 1, \lin, 0.0, 0.85],
    \amp, [0.0, 1, \lin, 0.01, 0.25]
    ], stream: p
).gui(varColorGroups: (0..19).clumps([4,3,3,3,5,1,1]))
)